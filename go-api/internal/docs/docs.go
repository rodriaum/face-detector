// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/images/delete/{id}": {
            "delete": {
                "description": "Delete a specific image by its ID",
                "tags": [
                    "Images"
                ],
                "summary": "Delete image by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Image ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Image successfully deleted"
                    },
                    "404": {
                        "description": "Image not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/images/get/{id}": {
            "get": {
                "description": "Retrieve a specific image by its ID",
                "produces": [
                    "image/*"
                ],
                "tags": [
                    "Images"
                ],
                "summary": "Get image by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Image ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Image file returned as binary data"
                    },
                    "404": {
                        "description": "Image not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/images/list": {
            "get": {
                "description": "Retrieve a list of all uploaded images with base64 encoded data",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Images"
                ],
                "summary": "Get all images",
                "responses": {
                    "200": {
                        "description": "A list of images",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "additionalProperties": true
                            }
                        }
                    },
                    "404": {
                        "description": "No images found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/images/metadata/{id}": {
            "get": {
                "description": "Retrieve metadata about a specific image",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Images"
                ],
                "summary": "Get image information",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Image ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Image information retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/models.FileUploadResponse"
                        }
                    },
                    "404": {
                        "description": "Image not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/images/upload": {
            "post": {
                "description": "Upload a new image file",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Images"
                ],
                "summary": "Upload image",
                "parameters": [
                    {
                        "type": "file",
                        "description": "Image file (JPG, PNG, GIF, BMP, WebP)",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Name of the uploader (defaults to 'anonymous' if not provided)",
                        "name": "uploadedBy",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Image uploaded successfully",
                        "schema": {
                            "$ref": "#/definitions/models.FileUploadResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request (no file, invalid image format, or invalid filename)",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/images/view/{id}": {
            "get": {
                "description": "Retrieve a specific image by its ID",
                "produces": [
                    "image/*"
                ],
                "tags": [
                    "Images"
                ],
                "summary": "Get image by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Image ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Image file returned as binary data"
                    },
                    "404": {
                        "description": "Image not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/info/ping": {
            "get": {
                "description": "Simple endpoint to verify if the server is operational",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Info"
                ],
                "summary": "Check server status",
                "responses": {
                    "200": {
                        "description": "Server is operational",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.FileUploadResponse": {
            "type": "object",
            "properties": {
                "contentType": {
                    "type": "string"
                },
                "fileId": {
                    "type": "string"
                },
                "fileName": {
                    "type": "string"
                },
                "fileSize": {
                    "type": "integer"
                },
                "uploadDate": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/v1",
	Schemes:          []string{},
	Title:            "Face Detector API",
	Description:      "API for face detection with image upload and management",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
